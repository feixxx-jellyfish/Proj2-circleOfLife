#include <iostream>
using namespace std;

//skeleton

struct Tile{
    char color;
    string effects;
};

class Board
{
private:
    static const int _BOARD_SIZE = 52;
    Tile _tiles[2][_BOARD_SIZE];
    static const int _MAX_PLAYERS = 2;
    int _player_count;
    int _player_position[_MAX_PLAYERS];
    void displayTile(int player_index, int pos);
    void initializeTiles(int player_index, char path);
    bool isPlayerOnTile(int player_index, int pos);

public:
    Board();
    Board(int player_count, char path[2]);
    void displayTrack(int player_index);
    void initializeBoard(char path[2]);
    void displayBoard();
    bool movePlayer(int player_index);
    int getPlayerPosition(int player_index) const;
};

class Advisor{
    public:
        void printAdvisorStats();

        string getName();
};

class Player{
    private:
        int _age;
        int _strength;
        int _stamina;
        int _wisdom;
        int _pridePoints;
        char _path;
        Advisor _advisor;

    public:
        Player(){
            _age = 0;
            _strength = 100;
            _stamina = 100;
            _wisdom = 100;
            _pridePoints = 20000;
            _path = 'P';
        }
        Player(int age, int strength, int stamina, int wisdom, char path){
            _age = age;
            if(strength >= 100){
                _strength = strength;
            }
            else{
                _strength = 100;
            }
            if(stamina >= 100){
                _stamina = stamina;
            }
            else{
                _stamina = 100;
            }
            if(wisdom >= 100){
                _wisdom = wisdom;
            }
            else{
            _wisdom = 100;
            }

            if(path == 'T'){
                _pridePoints = 15000;
            }
            if(path == 'P'){
                _pridePoints = 25000;
                _stamina +=200;
                _strength += 200;
                _wisdom += 200;
            }
        }

        void printCharacterStats();

        string getName();

        int getAge();

        Advisor getAdvisor();

        void setAdvisor(Advisor advisorChoice);

};

void loadCharacters(string filename, Player allCharacters[10]);

void printCharacters(Player allCharacters[10]);

void loadAdvisors(string filename, Advisor allAdvisors[5]);

void printAdvisors(Advisor allAdvisors[5]);

int moves(int player); //gererates random number for moves

int main(){
    Player players[2];
    Player allCharacters[10];
    Advisor allAdvisors[5];
    Board board;
    string playerName;
    string advisorName;
    int numPlayers;
    char path[2];



    cout<<"Initializing game."<<endl;

    loadCharacters("characters.txt", allCharacters);
    loadAdvisors("advisors.txt", allAdvisors);

    cout<<"How many players? (1-2)"<<endl;
    cin>>numPlayers;
    for(int i = 0; i<numPlayers; i++){
        cout<<"Player "<<i+1<<" choose a character"<<endl;
        printCharacters(allCharacters);
        cin>>playerName;

        for(int j = 0; j<10; j++){
            if(playerName == allCharacters[j].getName()){
                players[i] = allCharacters[j];
            }
        }
    }
    for(int i = 0; i<numPlayers; i++){
        cout<<"Player "<<i+1<<" choose a path:"<<endl;
        cout<<"(T) Cub training or (P) Straight to the pridelands."<<endl;
        cin>>path[i];

        if(path[i] == 'T'){
            cout<<"Choose an advisor:"<<endl;
            printAdvisors(allAdvisors);
            cin>>advisorName;

            for(int j = 0; j<5; j++){
                if(advisorName == allAdvisors[j].getName()){
                    players[i].setAdvisor(allAdvisors[j]);
                }
            }
        }

    }

    board.initializeBoard(path);

    cout<<"Let the game begin!"<<endl;
    board.displayBoard();

    int choice = 0;
    int character = 1;

    do{
        cout<<"--- The Circle of Life Game Menu ---"<<endl;
        cout<<"1. Check Player Progress: Review Pride Points and Leadership stats."<<endl;
        cout<<"2. Review Character: Check your character name and age."<<endl;
        cout<<"3. Check Position: Display board to view you current position:"<<endl;
        cout<<"4. Review your Advisor: Check who your current advisor is on the game."<<endl;
        cout<<"5. Move forward: For each player's turn, access this option to spin the virtual spinner."<<endl;
        cout<<"6. Exit"<<endl;
        cout<<"Please enter your choice (1 - 6):"<<endl;
        cin>>choice;

        
        if (choice == 1){
            players[character].printCharacterStats();
        }
        else if(choice == 2){
            cout<<"Name: "<< players[character].getName();
            cout<<"Age: "<<players[character].getAge();

        }
        else if (choice == 3){
            board.displayBoard();
        }
        else if (choice == 4){
            Advisor advisor = players[character].getAdvisor();
            advisor.printAdvisorStats();
        }

        else if(choice == 5){
            char choice;
            do{
                cout<<"Do you want to spin the spinner? (y or N)"<<endl;
            }
            while(choice != 'Y');

            if(choice == 'Y'){
                board.movePlayer(character);
                if(character ==0){
                    character = 1;
                }
                else if(character == 0){
                    character =1;
                }
            }
        }     
                
        else if(choice == 6){
            cout<<"Exiting game."<<endl;
        }        
            
        else{
                cout<<"Invalid input. Please select a valid option."<<endl;
        }

    }
    while(choice != 7);

    return 0;
}
